import logging
from typing import Optional

from animeon.constants import ANIME_STATUSES, ANIME_TYPES
from animeon.models import Anime

logger = logging.getLogger(__name__)


class Formatter:
    """Formats anime information into a text preview."""

    def __init__(self) -> None:
        """Initializes the class."""
        self.unknown_value = "–ù–µ–≤—ñ–¥–æ–º–æ"
        self.no_rating_value = "–ù–µ–º–∞—î"

        # It will be formatted with a bash script
        self.separator_tag = "{separator}"

    def format(self, anime: Anime) -> str:
        """
        Formats anime information into a text preview.

        Args:
            anime: Anime to format.

        Returns:
            Formatted text preview.
        """
        logger.debug(f"Formatting text preview for: {anime.title}")

        type_ = ANIME_TYPES.get(anime.type_) if anime.type_ else self.unknown_value
        rating = self._format_rating(anime.rating, anime.scored_by)
        status = (
            ANIME_STATUSES.get(anime.status) if anime.status else self.unknown_value
        )
        genres = ", ".join(anime.genres) if anime.genres else self.unknown_value

        return (
            f"{self.separator_tag}\n"
            f"{anime.title}\n"
            f"{self.separator_tag}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥:     {rating}\n"
            f"üé¨ –¢–∏–ø:         {type_}\n"
            f"üóÇÔ∏è –ï–ø—ñ–∑–æ–¥–∏:     {anime.episodes_aired or '?'} / {anime.episodes or '?'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å:      {status}\n"
            f"üìö –ñ–∞–Ω—Ä–∏:       {genres}\n"
            f"üóìÔ∏è –†—ñ–∫:         {anime.release_year or self.unknown_value}\n"
            f"üì∫ –°—Ç—É–¥—ñ—è:      {anime.studio or self.unknown_value}\n"
            f"üë§ –†–µ–∂–∏—Å–µ—Ä:     {anime.producer or self.unknown_value}\n"
            f"‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:  {anime.episode_duration or self.unknown_value}\n"
            f"{self.separator_tag}\n"
            "üìù –û–ø–∏—Å:\n"
            f"{anime.description or self.unknown_value}"
        )

    def _format_rating(self, rating: Optional[float], scored_by: Optional[int]) -> str:
        """
        Formats the rating of an anime.

        Args:
            rating: Rating of the anime.
            scored_by: Number of people who scored the rating.

        Returns:
            Formatted rating.
        """
        if rating:
            return f"{rating} ({scored_by or '???'} –≥–æ–ª–æ—Å—ñ–≤)"
        return self.no_rating_value
